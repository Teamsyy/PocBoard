# PocBoard - Enhanced Docker Management Makefile
# Provides easy commands for managing the Docker development environment

.PHONY: help dev prod logs clean status health restart build setup

# Default target
help: ## Show this help message
	@echo "PocBoard Docker Management Commands:"
	@echo "======================================"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "Quick Start: make setup && make dev"

setup: ## Initial setup for development environment
	@echo "🔧 Setting up PocBoard development environment..."
	@cp .env.template .env 2>/dev/null || echo "ℹ️  .env already exists"
	@mkdir -p uploads/boards
	@echo "✅ Environment setup complete!"
	@echo ""
	@echo "Next steps: run 'make dev' to start the application"

dev: ## Start development environment with all services
	@echo "🚀 Starting PocBoard development environment..."
	@mkdir -p uploads/boards
	@docker-compose up -d postgres
	@echo "⏳ Waiting for database to initialize..."
	@sleep 10
	@docker-compose up -d backend
	@echo "⏳ Waiting for backend to be ready..."
	@sleep 15  
	@docker-compose up -d frontend
	@echo "✅ Development environment started!"
	@echo ""
	@echo "🌐 Access your application:"
	@echo "   Frontend:  http://localhost:3000"
	@echo "   Backend:   http://localhost:8080"
	@echo "   Health:    http://localhost:8080/health"

prod: ## Start production environment
	@echo "🏭 Starting PocBoard production environment..."
	@docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
	@echo "✅ Production environment started!"

stop: ## Stop all services
	@echo "🛑 Stopping all services..."
	@docker-compose down
	@echo "✅ All services stopped!"

restart: ## Restart all services
	@echo "🔄 Restarting all services..."
	@docker-compose restart
	@echo "✅ All services restarted!"

logs: ## Show logs from all services (follow mode)
	@docker-compose logs -f

status: ## Show status of all services
	@echo "📊 Service Status:"
	@echo "=================="
	@docker-compose ps

health: ## Check health of all services
	@echo "🏥 Health Check:"
	@echo "================"
	@echo "Backend Health:"
	@curl -s http://localhost:8080/health || echo "❌ Backend not responding"
	@echo ""
	@echo "Frontend Health:"
	@curl -s -o /dev/null -w "%%{http_code}" http://localhost:3000 || echo "❌ Frontend not responding"
	@echo ""

build: ## Rebuild all services
	@echo "🔨 Building all services..."
	@docker-compose build
	@echo "✅ Build complete!"

clean: ## Stop services and remove volumes (⚠️  DELETES ALL DATA)
	@echo "🧹 WARNING: This will delete all data!"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ]
	@docker-compose down -v
	@docker system prune -f
	@echo "✅ Cleanup complete!"

pgadmin: ## Start PgAdmin for database management
	@echo "🔧 Starting PgAdmin..."
	@docker-compose --profile tools up -d pgadmin
	@echo "✅ PgAdmin available at http://localhost:8081"

# Aliases for convenience
up: dev ## Alias for dev
down: stop ## Alias for stop
